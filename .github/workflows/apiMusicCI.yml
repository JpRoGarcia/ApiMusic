name: ApiMusic CI

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: us-east-1

jobs:
  unitest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test
  build:
    needs: unitest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
         
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
       
      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/appmusic:latest
  terraform:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      - name: setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=us-east-1"
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
          -var="region=$AWS_REGION" \
          -var="bucket=$TF_STATE_BUCKET_NAME" \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=deployer-key" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set output
        id: set-ip
        run: |-
            echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
        working-directory: ./terraform

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Ip env Variable
        run: echo SERVER_PUBLIC_IP=${{ needs.terraform.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV

      - name: SSH to Server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          host: ${{ env.SERVER_PUBLIC_IP }}  # Make sure this is set in your secrets
          script: |
            echo "SSH_HOST: ${{ env.SERVER_PUBLIC_IP }}
            echo "SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
            sudo apt update
            sudo apt install docker.io -y
            docker pull jprogarcia/appmusic:latest
            sudo docker pull jprogarcia/appmusic:latest
            sudo docker run -d -p 80:80 jprogarcia/appmusic:latest

  